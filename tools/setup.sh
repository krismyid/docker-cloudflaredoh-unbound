#!/bin/bash

# Setup script for DNS Infrastructure deployment
# Helps initialize configuration and validate setup

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_FILE="$SCRIPT_DIR/config/deploy.config"
TEMPLATE_FILE="$SCRIPT_DIR/config/deploy.config.template"

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[SETUP]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[SETUP]${NC} $1"
}

error() {
    echo -e "${RED}[SETUP]${NC} $1"
}

info() {
    echo -e "${BLUE}[SETUP]${NC} $1"
}

# Check if configuration exists
check_config() {
    if [[ -f "$CONFIG_FILE" ]]; then
        log "Configuration file found: $CONFIG_FILE"
        return 0
    else
        warn "Configuration file not found: $CONFIG_FILE"
        return 1
    fi
}

# Create configuration from template
create_config() {
    if [[ ! -f "$TEMPLATE_FILE" ]]; then
        error "Template file not found: $TEMPLATE_FILE"
        exit 1
    fi
    
    log "Creating configuration file from template..."
    cp "$TEMPLATE_FILE" "$CONFIG_FILE"
    
    info "Configuration file created: $CONFIG_FILE"
    info "Please edit this file with your server details before deploying."
}

# Interactive configuration setup
interactive_setup() {
    log "Starting interactive configuration setup..."
    
    # Get remote host
    read -p "Enter remote hostname or IP: " remote_host
    [[ -z "$remote_host" ]] && { error "Remote host is required"; exit 1; }
    
    # Get remote user
    read -p "Enter remote username (default: $USER): " remote_user
    remote_user="${remote_user:-$USER}"
    
    # Get remote directory
    default_dir="/home/$remote_user/docker-cloudflaredoh-unbound"
    read -p "Enter remote directory (default: $default_dir): " remote_dir
    remote_dir="${remote_dir:-$default_dir}"
    
    # Get SSH key (optional)
    read -p "Enter SSH private key path (optional): " ssh_key
    
    # Get SSH port
    read -p "Enter SSH port (default: 22): " ssh_port
    ssh_port="${ssh_port:-22}"
    
    # Create config file
    cat > "$CONFIG_FILE" << EOF
# Deployment Configuration
# Generated by setup script on $(date)

# Remote server configuration
REMOTE_HOST="$remote_host"
REMOTE_USER="$remote_user"
REMOTE_DIR="$remote_dir"

# SSH configuration
SSH_KEY="$ssh_key"
SSH_PORT="$ssh_port"
SSH_OPTIONS=""

# Docker configuration
DOCKER_COMPOSE_CMD="docker compose"

# Deployment options
BACKUP_BEFORE_DEPLOY="true"
AUTO_START_SERVICES="true"
CHECK_DEPENDENCIES="true"

# Notification settings
SLACK_WEBHOOK=""
DISCORD_WEBHOOK=""
EOF

    log "Configuration file created successfully!"
    info "File location: $CONFIG_FILE"
}

# Validate configuration
validate_config() {
    if ! check_config; then
        error "No configuration file found. Run 'setup create' first."
        return 1
    fi
    
    log "Validating configuration..."
    source "$CONFIG_FILE"
    
    # Check required variables
    local errors=0
    
    if [[ -z "$REMOTE_HOST" ]]; then
        error "REMOTE_HOST is not set"
        ((errors++))
    fi
    
    if [[ -z "$REMOTE_USER" ]]; then
        error "REMOTE_USER is not set"
        ((errors++))
    fi
    
    if [[ -z "$REMOTE_DIR" ]]; then
        error "REMOTE_DIR is not set"
        ((errors++))
    fi
    
    # Check SSH key if specified
    if [[ -n "$SSH_KEY" && ! -f "$SSH_KEY" ]]; then
        error "SSH key file not found: $SSH_KEY"
        ((errors++))
    fi
    
    if [[ $errors -eq 0 ]]; then
        log "Configuration validation passed!"
        info "Remote target: $REMOTE_USER@$REMOTE_HOST:$REMOTE_DIR"
        return 0
    else
        error "Configuration validation failed with $errors errors"
        return 1
    fi
}

# Test connection to remote server
test_connection() {
    if ! validate_config; then
        exit 1
    fi
    
    source "$CONFIG_FILE"
    
    log "Testing SSH connection to $REMOTE_USER@$REMOTE_HOST..."
    
    # Build SSH command
    ssh_cmd="ssh"
    if [[ -n "$SSH_KEY" ]]; then
        ssh_cmd="$ssh_cmd -i $SSH_KEY"
    fi
    if [[ "$SSH_PORT" != "22" ]]; then
        ssh_cmd="$ssh_cmd -p $SSH_PORT"
    fi
    ssh_cmd="$ssh_cmd $REMOTE_USER@$REMOTE_HOST"
    
    if $ssh_cmd "echo 'Connection successful'" > /dev/null 2>&1; then
        log "SSH connection test passed!"
        
        # Get system info
        info "Remote system information:"
        $ssh_cmd "echo '  OS: ' \$(lsb_release -d 2>/dev/null | cut -f2 || uname -s)"
        $ssh_cmd "echo '  Kernel: ' \$(uname -r)"
        $ssh_cmd "echo '  User: ' \$(whoami)"
        $ssh_cmd "echo '  Home: ' \$(pwd)"
        
        # Check Docker
        if $ssh_cmd "command -v docker &> /dev/null"; then
            log "Docker is available on remote server"
            $ssh_cmd "docker --version"
        else
            warn "Docker is not installed on remote server"
        fi
        
    else
        error "SSH connection test failed!"
        info "Command used: $ssh_cmd"
        exit 1
    fi
}

# Show current configuration
show_config() {
    if ! check_config; then
        error "No configuration file found"
        exit 1
    fi
    
    log "Current configuration:"
    echo
    cat "$CONFIG_FILE"
}

# Show help
show_help() {
    echo "DNS Infrastructure Setup Script"
    echo ""
    echo "Usage: $0 [COMMAND]"
    echo ""
    echo "Commands:"
    echo "  create      Create configuration from template"
    echo "  interactive Create configuration interactively"
    echo "  validate    Validate current configuration"
    echo "  test        Test SSH connection to remote server"
    echo "  show        Show current configuration"
    echo "  help        Show this help message"
    echo ""
    echo "Files:"
    echo "  tools/config/deploy.config.template  Configuration template"
    echo "  tools/config/deploy.config          Your configuration (gitignored)"
    echo ""
    echo "Examples:"
    echo "  $0 interactive  # Create config interactively"
    echo "  $0 validate     # Check configuration"
    echo "  $0 test         # Test SSH connection"
}

# Main script logic
main() {
    case "${1:-help}" in
        create)
            if check_config; then
                warn "Configuration file already exists!"
                read -p "Overwrite existing configuration? (y/N): " -n 1 -r
                echo
                if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                    info "Keeping existing configuration"
                    exit 0
                fi
            fi
            create_config
            ;;
        interactive)
            if check_config; then
                warn "Configuration file already exists!"
                read -p "Overwrite existing configuration? (y/N): " -n 1 -r
                echo
                if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                    info "Keeping existing configuration"
                    exit 0
                fi
            fi
            interactive_setup
            ;;
        validate)
            validate_config
            ;;
        test)
            test_connection
            ;;
        show)
            show_config
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            error "Unknown command: $1"
            show_help
            exit 1
            ;;
    esac
}

main "$@"
